# Icon Hunter Dockerfile - Alpine优化版本
# 适合国内用户的最小化构建

# ==========================================
# 依赖安装阶段
# ==========================================
FROM node:18-alpine AS deps

WORKDIR /app

# 复制package文件
COPY package*.json ./

# 设置npm镜像源并安装依赖
RUN npm config set registry https://registry.npmmirror.com && \
    npm ci --frozen-lockfile --production=false && \
    npm cache clean --force

# ==========================================
# 构建阶段
# ==========================================
FROM node:18-alpine AS builder

WORKDIR /app

# 复制依赖
COPY --from=deps /app/node_modules ./node_modules

# 复制源代码和构建配置
COPY . .

# 读取 .env.build 文件并构建应用
RUN echo "🔧 开始构建过程..." && \
    if [ -f .env.build ]; then \
        echo "📋 读取构建配置文件..." && \
        export $(cat .env.build | grep -v '^#' | grep -v '^[[:space:]]*$' | xargs) && \
        echo "✅ 构建配置:" && \
        echo "   NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL" && \
        echo "   NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" && \
        echo "   NEXT_PUBLIC_GA_ID=$NEXT_PUBLIC_GA_ID" && \
        echo "   NEXT_PUBLIC_BAIDU_ANALYTICS_ID=$NEXT_PUBLIC_BAIDU_ANALYTICS_ID"; \
    else \
        echo "⚠️  警告: .env.build 文件不存在，使用默认配置" && \
        export NODE_ENV=production && \
        export NEXT_TELEMETRY_DISABLED=1; \
    fi && \
    echo "🚀 开始构建应用..." && \
    npm run build && \
    echo "🧹 清理构建配置文件..." && \
    rm -f .env.build && \
    echo "✅ 构建完成!"

# ==========================================
# 运行阶段 - 最小Alpine
# ==========================================
FROM node:18-alpine AS runner

# 只安装必要的运行时
RUN apk add --no-cache tini

WORKDIR /app

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 创建非root用户
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 复制必要文件
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

# 暴露端口
EXPOSE 3000

# 使用tini作为init进程，提高信号处理
ENTRYPOINT ["/sbin/tini", "--"]

# 启动应用
CMD ["node", "server.js"] 